name: Testing Workflow

on:
  repository_dispatch:
    types: [development-complete]
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  MYSQL_VERSION: '8.0'
  REDIS_VERSION: '7'

jobs:
  # ÂçïÂÖÉÊµãËØï
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:cov
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: true
          
      - name: Check coverage threshold
        run: |
          COVERAGE=$(npm run test:cov --silent | grep "All files" | awk '{print $10}' | sed 's/%//')
          echo "Test coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ùå Test coverage ($COVERAGE%) is below threshold (80%)"
            exit 1
          else
            echo "‚úÖ Test coverage ($COVERAGE%) meets threshold"
          fi

  # ÈõÜÊàêÊµãËØï
  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: mobilif_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_test
          REDIS_URL: redis://localhost:6379
        run: |
          npm run migration:run
          npm run seed
          
      - name: Run integration tests
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
        run: npm run test:integration

  # APIÊµãËØï
  api-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: mobilif_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Newman
        run: npm install -g newman newman-reporter-htmlextra
        
      - name: Setup test database
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_test
          REDIS_URL: redis://localhost:6379
        run: |
          npm run migration:run
          npm run seed
          
      - name: Start application
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          PORT: 3000
        run: |
          npm run start:prod &
          sleep 10
          
      - name: Wait for application
        run: |
          timeout 30s bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'
          
      - name: Run Postman tests
        run: |
          newman run tests/MobiLiF-Gym-List-API.postman_collection.json \
            -e tests/postman-environment.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export api-test-report.html \
            --delay-request 500
            
      - name: Upload API test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-report
          path: api-test-report.html
          retention-days: 7

  # E2EÊµãËØï
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [api-tests]
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: mobilif_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_test
          REDIS_URL: redis://localhost:6379
        run: |
          npm run migration:run
          npm run seed
          
      - name: Start application
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          PORT: 3000
        run: |
          npm run start:prod &
          sleep 10
          
      - name: Run E2E tests
        env:
          API_BASE_URL: http://localhost:3000
        run: npm run test:e2e
        
      - name: Upload E2E test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: tests/e2e/screenshots/
          retention-days: 7

  # ÊÄßËÉΩÊµãËØï
  performance-tests:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development'
    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: mobilif_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Apache Bench
        run: sudo apt-get update && sudo apt-get install -y apache2-utils
        
      - name: Setup test database
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_test
          REDIS_URL: redis://localhost:6379
        run: |
          npm run migration:run
          npm run seed
          
      - name: Start application
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          PORT: 3000
        run: |
          npm run start:prod &
          sleep 10
          
      - name: Run performance tests
        run: |
          echo "Testing API performance..."
          ab -n 1000 -c 10 -g performance.tsv http://localhost:3000/health
          ab -n 500 -c 5 http://localhost:3000/api/gyms
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance.tsv
          retention-days: 7

  # ÊµãËØïÊä•ÂëäÊ±áÊÄª
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, e2e-tests, performance-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate test summary
        run: |
          echo "# üß™ ÊµãËØïÁªìÊûúÊ±áÊÄª" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| ÊµãËØïÁ±ªÂûã | Áä∂ÊÄÅ |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| ÂçïÂÖÉÊµãËØï | ${{ needs.unit-tests.result == 'success' && '‚úÖ ÈÄöËøá' || '‚ùå Â§±Ë¥•' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ÈõÜÊàêÊµãËØï | ${{ needs.integration-tests.result == 'success' && '‚úÖ ÈÄöËøá' || '‚ùå Â§±Ë¥•' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| APIÊµãËØï | ${{ needs.api-tests.result == 'success' && '‚úÖ ÈÄöËøá' || '‚ùå Â§±Ë¥•' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2EÊµãËØï | ${{ needs.e2e-tests.result == 'success' && '‚úÖ ÈÄöËøá' || '‚ùå Â§±Ë¥•' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ÊÄßËÉΩÊµãËØï | ${{ needs.performance-tests.result == 'success' && '‚úÖ ÈÄöËøá' || needs.performance-tests.result == 'skipped' && '‚è≠Ô∏è Ë∑≥Ëøá' || '‚ùå Â§±Ë¥•' }} |" >> $GITHUB_STEP_SUMMARY
          
      - name: Check if all tests passed
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.api-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "‚úÖ ÊâÄÊúâÊ†∏ÂøÉÊµãËØïÈÄöËøáÔºÅÂáÜÂ§áËøõÂÖ•Â∞èÁ®ãÂ∫èÂêåÊ≠•Èò∂ÊÆµ"
            echo "test_passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå ÈÉ®ÂàÜÊµãËØïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÊµãËØïÁªìÊûú"
            echo "test_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Trigger miniprogram workflow
        if: success()
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: testing-complete
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'