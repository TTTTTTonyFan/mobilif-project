name: Production Deployment

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: '部署类型'
        required: true
        type: choice
        options:
          - hotfix
          - feature
          - release
        default: feature
      skip_tests:
        description: '跳过测试'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'registry.cn-hangzhou.aliyuncs.com'
  DOCKER_NAMESPACE: 'mobilif'
  DEPLOYMENT_SERVER: '8.147.235.48'

jobs:
  # 检查部署触发条件
  check-trigger:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deploy_ref: ${{ steps.check.outputs.deploy_ref }}
    steps:
      - name: Check deployment trigger
        id: check
        run: |
          # 检查是否是Issue评论触发
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMENT="${{ github.event.comment.body }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            
            # 检查是否是小程序测试确认
            if [[ "$ISSUE_TITLE" == *"小程序测试"* && "$COMMENT" == *"测试通过"* ]]; then
              echo "✅ 小程序测试确认，触发生产部署"
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "deploy_ref=main" >> $GITHUB_OUTPUT
            else
              echo "❌ 不满足部署触发条件"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "✅ 手动触发部署"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "deploy_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          else
            echo "❌ 未知触发方式"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # 预部署检查
  pre-deployment-check:
    runs-on: ubuntu-latest
    needs: [check-trigger]
    if: needs.check-trigger.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-trigger.outputs.deploy_ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Security audit
        run: npm audit --audit-level high
        
      - name: Check environment variables
        run: |
          # 检查必需的环境变量
          REQUIRED_VARS=("DATABASE_URL" "REDIS_URL" "JWT_SECRET" "DOCKER_PASSWORD")
          for var in "${REQUIRED_VARS[@]}"; do
            if [[ -z "${!var}" && -z "${{ secrets[var] }}" ]]; then
              echo "❌ Missing required environment variable: $var"
              exit 1
            fi
          done
          echo "✅ All required environment variables are set"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  # 运行生产前测试
  production-tests:
    runs-on: ubuntu-latest
    needs: [pre-deployment-check]
    if: github.event.inputs.skip_tests != 'true'
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: mobilif_prod_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-trigger.outputs.deploy_ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run critical tests
        env:
          DATABASE_URL: mysql://root:test_password@localhost:3306/mobilif_prod_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: prod_test_jwt_secret
        run: |
          npm run migration:run
          npm run test -- --testPathPattern="critical"
          npm run test:e2e -- --testNamePattern="critical"

  # 构建Docker镜像
  build-docker-image:
    runs-on: ubuntu-latest
    needs: [production-tests]
    if: always() && needs.pre-deployment-check.result == 'success' && (needs.production-tests.result == 'success' || needs.production-tests.result == 'skipped')
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-trigger.outputs.deploy_ref }}
          
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Generate image tag
        id: meta
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          IMAGE_TAG="${TIMESTAMP}-${SHORT_SHA}"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated image tag: $IMAGE_TAG"
          
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/mobilif-backend:${{ steps.meta.outputs.image_tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/mobilif-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Save image info
        run: |
          echo "IMAGE_TAG=${{ steps.meta.outputs.image_tag }}" >> deployment-info.txt
          echo "IMAGE_URL=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/mobilif-backend:${{ steps.meta.outputs.image_tag }}" >> deployment-info.txt
          echo "COMMIT_SHA=${{ github.sha }}" >> deployment-info.txt
          echo "DEPLOY_TIME=$(date)" >> deployment-info.txt
          
      - name: Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment-info.txt
          retention-days: 30

  # 部署到生产环境
  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [build-docker-image]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-trigger.outputs.deploy_ref }}
          
      - name: Download deployment info
        uses: actions/download-artifact@v4
        with:
          name: deployment-info
          
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOYMENT_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.DEPLOYMENT_SERVER }} >> ~/.ssh/known_hosts
          
      - name: Deploy to server
        run: |
          # 读取部署信息
          source deployment-info.txt
          
          # 连接到服务器并部署
          ssh root@${{ env.DEPLOYMENT_SERVER }} << EOF
            set -e
            
            echo "🚀 开始部署 MobiLiF 到生产环境..."
            
            # 进入项目目录
            cd /var/www/mobilif
            
            # 备份当前版本
            if [ -f docker-compose.yml ]; then
              echo "📦 备份当前版本..."
              docker-compose down || true
              tar -czf backup-\$(date +%Y%m%d-%H%M%S).tar.gz . --exclude=backup-*.tar.gz
            fi
            
            # 更新代码
            echo "📥 拉取最新代码..."
            git fetch origin
            git checkout ${{ needs.check-trigger.outputs.deploy_ref }}
            git pull origin ${{ needs.check-trigger.outputs.deploy_ref }}
            
            # 更新Docker镜像
            echo "🐳 拉取Docker镜像..."
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/mobilif-backend:$IMAGE_TAG
            
            # 更新docker-compose配置
            echo "⚙️ 更新配置..."
            sed -i "s|image: .*mobilif-backend:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/mobilif-backend:$IMAGE_TAG|" docker-compose.yml
            
            # 启动服务
            echo "🔄 启动服务..."
            docker-compose up -d
            
            # 等待服务启动
            echo "⏳ 等待服务启动..."
            sleep 30
            
            # 健康检查
            echo "🔍 健康检查..."
            if curl -f http://localhost:3000/health; then
              echo "✅ 部署成功！"
            else
              echo "❌ 健康检查失败，回滚到之前版本..."
              docker-compose down
              # 这里可以添加回滚逻辑
              exit 1
            fi
          EOF
          
      - name: Run database migrations
        run: |
          ssh root@${{ env.DEPLOYMENT_SERVER }} << EOF
            cd /var/www/mobilif
            echo "🗄️ 运行数据库迁移..."
            docker-compose exec -T backend npm run migration:run
          EOF
          
      - name: Verify deployment
        run: |
          echo "🔍 验证部署..."
          
          # 检查服务状态
          HEALTH_STATUS=\$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.DEPLOYMENT_SERVER }}:3000/health)
          if [ "\$HEALTH_STATUS" == "200" ]; then
            echo "✅ 服务健康检查通过"
          else
            echo "❌ 服务健康检查失败 (HTTP \$HEALTH_STATUS)"
            exit 1
          fi
          
          # 检查API可用性
          API_STATUS=\$(curl -s -o /dev/null -w "%{http_code}" http://${{ env.DEPLOYMENT_SERVER }}:3000/api/gyms)
          if [ "\$API_STATUS" == "200" ]; then
            echo "✅ API端点可用"
          else
            echo "❌ API端点不可用 (HTTP \$API_STATUS)"
            exit 1
          fi

  # 部署后通知
  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-to-production, build-docker-image]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 🚀 生产环境部署结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 部署信息" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像版本**: ${{ needs.build-docker-image.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **部署时间**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **提交SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **部署状态**: ${{ needs.deploy-to-production.result == 'success' && '✅ 成功' || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-to-production.result }}" == "success" ]; then
            echo "## 🎉 部署成功！" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "应用已成功部署到生产环境。" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- 🌐 API地址: http://${{ env.DEPLOYMENT_SERVER }}:3000" >> $GITHUB_STEP_SUMMARY
            echo "- 📚 API文档: http://${{ env.DEPLOYMENT_SERVER }}:3000/api" >> $GITHUB_STEP_SUMMARY
            echo "- 💚 健康检查: http://${{ env.DEPLOYMENT_SERVER }}:3000/health" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ 部署失败" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "请检查部署日志并修复问题。" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Update deployment status
        if: needs.deploy-to-production.result == 'success'
        run: |
          echo "✅ 生产环境部署完成"
          echo "🎯 完整的开发-测试-部署工作流程已完成"