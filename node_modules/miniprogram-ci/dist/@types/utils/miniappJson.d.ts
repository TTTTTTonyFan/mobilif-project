import types from 'licia/types';
export declare const miniAppPlatformMap: {
    'mini-android': string;
    'mini-ios': string;
    'mini-weixin': string;
};
export declare enum PLATFORM {
    ANDROID = "mini-android",
    IOS = "mini-ios",
    PLUGIN = "mini-plugin"
}
export interface IAppMiniappJSON {
    mockWithWxLoginToken?: string;
    adapteByMiniprogram?: {
        userName: string;
    };
    identityServiceConfig?: {
        authorizeMiniprogramType: number;
        miniprogramLoginPath: string;
        adaptWxLogin?: boolean;
    };
}
export interface IOldMiniappJSON {
    name: string;
    icon: string;
    'mini-android': {
        useProjectTemplate: boolean;
        projectPath: string;
        archivePath: string;
        buildArchiveEverytime: boolean;
        runArgs: {
            mainActivity: string;
            variant: string;
        };
        buildArgs: {
            variant: string;
        };
    };
    'mini-ios': {
        useProjectTemplate: boolean;
        projectPath: string;
        archivePath: string;
        buildArchiveEverytime: boolean;
        runArgs: {
            scheme: string;
        };
        buildArgs: {
            scheme: string;
            exportOptionPlistPath: string;
        };
    };
}
export interface IMiniAndroidMiniappJson {
    sdkVersion: string;
    toolkitVersion: string;
    useExtendedSdk: {
        media: boolean;
        bluetooth: boolean;
        network: boolean;
        scanner: boolean;
        xweb: boolean;
    };
    icons: {
        hdpi?: string;
        xhdpi?: string;
        xxhdpi?: string;
        xxxhdpi?: string;
    };
    splashscreen: {
        hdpi?: string;
        xhdpi?: string;
        xxhdpi?: string;
    };
    enableVConsole: boolean;
    officialPlugins?: {
        imPush?: {
            enable: boolean;
            version?: string;
        };
    };
}
export interface IMiniIOSMiniappJson {
    sdkVersion: string;
    toolkitVersion: string;
    useExtendedSdk: {
        WeAppOpenFuns?: boolean;
        WeAppNetwork?: boolean;
        WeAppBluetooth?: boolean;
        WeAppMedia?: boolean;
        WeAppLBS?: boolean;
        WeAppLive?: boolean;
        WeAppOthers?: boolean;
    };
    enableVConsole: boolean;
    icons: {
        mainIcon120?: string;
        mainIcon180?: string;
        spotlightIcon80?: string;
        spotlightIcon120?: string;
        settingsIcon58?: string;
        settingsIcon87?: string;
        notificationIcon40?: string;
        notificationIcon60?: string;
    };
    splashScreen?: {
        customImage?: string;
    };
    tpush?: {
        useExtendedLib_WeAppTPNS?: boolean;
        accessKey: string;
        accessID: number;
    };
    officialPlugins?: {
        imPush?: {
            enable: boolean;
            version?: string;
            businessID?: string;
            TIMPushAppGroupId?: string;
            enableNSE: boolean;
            NSEBundleID?: string;
            NSEProfilePath?: string;
            NSEDistributetProfilePath?: string;
            resourcePath?: string;
        };
    };
}
export interface IMiniPluginIOSItem {
    open: boolean;
    pluginId: string;
    pluginVersion: string;
    isFromLocal?: boolean;
    loadWhenStart?: boolean;
    resourcePath?: string;
    resourceObjects?: {
        [key: string]: string;
    };
    appexProfiles?: {
        [key: string]: {
            enable?: boolean;
            bundleID?: string;
            profilePath?: string;
            distributeProfilePath?: string;
        };
    };
}
export interface IMiniPluginAndroidItem {
    open: boolean;
    pluginId: string;
    pluginVersion: string;
}
export interface IMiniPluginMiniappJson {
    android: IMiniPluginAndroidItem[];
    ios: IMiniPluginIOSItem[];
}
export interface IAndroidMiniappJSON extends IMiniAndroidMiniappJson {
    miniVersion: 'v2';
    name: string;
    sdkKey: string;
    sdkKeySecret: string;
    'mini-plugin': IMiniPluginMiniappJson;
}
export interface IIOSMiniappJSON extends IMiniIOSMiniappJson {
    miniVersion: 'v2';
    name: string;
    sdkKey: string;
    sdkKeySecret: string;
    'mini-plugin': IMiniPluginMiniappJson;
}
export interface INewMiniappJSON {
    miniVersion: 'v2';
    name: string;
    'mini-android': IMiniAndroidMiniappJson;
    'mini-ios': IMiniIOSMiniappJson;
    sdkKey: string;
    sdkKeySecret: string;
    'mini-plugin': IMiniPluginMiniappJson;
}
export type IMiniappJSON = IOldMiniappJSON | INewMiniappJSON;
export declare function identityServiceConfigToMiniAppJSON(pagePath: string, appMiniappJSON?: IAppMiniappJSON): IAppMiniappJSON;
export declare function getRawMiniappJson(projectPath: string): any;
export declare function getMiniappJson(projectPath: string, targetPlatform?: string): any;
export declare function tryGetAndroidMiniappJson(projectPath: string): any;
export declare function tryGetIOSMiniappJson(projectPath: string): any;
export declare function tryGetPluginMiniappJson(projectPath: string): IMiniPluginMiniappJson;
export declare function isMiniAppProjectWithProjectPath(projectpath: string): boolean;
export declare function isNewMiniAppProjectWithProjectPath(projectpath: string): boolean;
export declare function writeMiniAppJsonWithProjectPath(projectpath: string, values: types.PlainObj<any>): void;
export declare function iOSMiniAppJsonIsUsingTpush(iosMiniappJson: any): any;
export declare function iOSMiniAppJsonIsUsingGDT(iosMiniappJson: any): any;
export declare function iOSAppJsonIsUsingIPadResizable(projectPath: string): boolean;
export declare function getRawAppJSON(projectPath: string): any;
export declare function getMiniprogramRoot(projectPath: string): any;
export declare function getTargetMiniprogramArg(projectPath: string, targetArg: string): any;
export declare const iosPrivacyDescObj: Record<string, string>;
export declare function isAndroidNeedClientJsExtInfo(projectPath: string): 0 | 1;
export declare const autoCompleteIOSPrivacyDesc: (projectpath: string) => boolean;
