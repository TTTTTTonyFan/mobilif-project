/// <reference types="node" />
export type IRegion = 'ap-shanghai';
export interface IUploadToCosCoreParam {
    uploadBuf: Buffer;
    region: IRegion;
    getUploadInfoFunc: FGetUploadInfoFunc;
    getAuthFunc: FGetAuthFunc;
}
export interface IUploadToCosCoreRes {
    err?: string;
    data?: string;
}
export interface IUploadInfo {
    expired_time: string;
    start_time: string;
    object: string;
    bucket: string;
    crypt_key: string;
    task_id: string;
    checksum: string;
}
export interface IUploadReq extends IUploadInfo {
    action: string;
    uploadId?: string;
}
export interface IAuthResData {
    Authorization: string;
    SecurityToken: string;
    AuthExpireTime: number;
}
export interface IReqCache extends IUploadReq, IAuthResData {
}
type FGetUploadInfoFunc = () => Promise<IUploadInfo>;
type FGetAuthFunc = (data: IUploadReq) => Promise<IAuthResData>;
export declare function uploadToCosCore({ uploadBuf, region, getUploadInfoFunc, getAuthFunc, }: IUploadToCosCoreParam): Promise<IUploadToCosCoreRes>;
export declare function uploadToCosInCI(): void;
export {};
