import { MiniProgramCore, MiniProgramDevtools } from '../types';
import { Analyzer } from '../common/code-analyse';
declare class PackOptionsHelper {
    private packOptionIgnores;
    private packOptionIncludes;
    private ignoreUploadUnusedFiles;
    private ignoreDevUnusedFiles;
    private unusedFiles;
    private projectRoot;
    private extOpts;
    setExtOpts(options?: {
        include?: MiniProgramDevtools.IProjectConfigPackOption[];
        ignore?: MiniProgramDevtools.IProjectConfigPackOption[];
    }): void;
    updateState(project: MiniProgramCore.IProject): void;
    isUnuserFilesEnable(production?: boolean): boolean;
    filter(fileList: string[], production?: boolean): string[];
    isIgnored(file: string, production?: boolean): any;
    isNotIgnored(file: string, production?: boolean): boolean;
    isIgnoredByRules(file: string, ext?: {
        ignore?: MiniProgramDevtools.IProjectConfigPackOption[];
        include?: MiniProgramDevtools.IProjectConfigPackOption[];
    }): any;
    relativePath(file: string): string;
    isFileIgnored(file: string, ignores?: MiniProgramDevtools.IProjectConfigPackOption[]): any;
    isFileIncluded(file: string, includes?: MiniProgramDevtools.IProjectConfigPackOption[]): any;
    isIgnoreByUnusedFiles(file: string, production?: boolean): boolean;
    getUnusedFiles(): Set<string>;
    initUnusedFiles(project: MiniProgramCore.IPreCompileProject, analyzer: Analyzer, production?: boolean): Promise<void>;
}
declare const _default: PackOptionsHelper;
export default _default;
