/// <reference types="node" />
import { RawSourceMap } from 'source-map';
import { AppJSON, MiniProgramCI, MiniProgramCore } from '../types';
export declare function normalizePath(pathName?: string): string;
export declare function joinPath(basePath?: string, appendPath?: string): string;
export declare function escapeScript(str: string): string;
export declare function wrapCodeByEval(code: string): string;
export declare function getType(object: any): string;
export declare const bufferToUtf8String: (buf: Buffer) => string | undefined;
export declare const formatJSONParseErr: (event: {
    filePath: string;
    data: string;
    error: string;
}) => string;
export declare const isHexColor: (hex: string) => boolean;
export declare function rmSync(filePath: string): void;
export declare function mkdirSync(dist: string): void;
export declare function escapeQuot(str: string, type?: string): string;
export declare function trailing(str: string, char: string, reversed?: boolean): string;
export declare function leading(str: string, char: string, reversed?: boolean): string;
export declare const isFileIgnored: (file: string, ignoreRule: any) => any;
export declare const isFileIncluded: (file: string, ignoreRule: any) => any;
export declare function formatSourceMap(map: string | RawSourceMap): string | undefined;
export declare function generateMD5(buffer: Buffer | string): string;
export declare const formatNumber: (n: number) => string;
export declare const formatTime: (date: Date) => string;
export declare function devtoolsInfo(...args: any[]): void;
export declare function devtoolsLog(...args: any[]): void;
export declare function devtoolsError(...args: any[]): void;
export declare function checkIsInSubPackage(appConfig: Readonly<AppJSON.IAppConfig>, pathName?: string): undefined | AppJSON.ISubpackageItem;
export declare function checkIsIndependentSubpackage(appConfig: Readonly<AppJSON.IAppConfig>, pathName: string): undefined | AppJSON.ISubpackageItem;
export declare function getTerm(): any;
export declare function getAppJson(project: MiniProgramCI.IProject, targetPlatform?: string): any;
export declare function getPluginJson(project: MiniProgramCore.IProject, targetPlatform?: string): any;
export declare const getWorkersPath: (workers: Exclude<AppJSON.IAppJSON['workers'], undefined>) => string;
export declare const unifyPath: (filePath: string) => string;
export declare const compareVersion: (version1: string, version2: string) => 0 | 1 | -1 | -2;
export declare const pathRelative: (left: string, right: string) => string;
export declare function isLeftSubPathOfRight(child: string, parent: string): boolean;
export declare function isGameApp(project: MiniProgramCI.IProject): boolean;
export declare function isPluginType(project: MiniProgramCI.IProject): boolean;
export declare function isMiniappPlatform(targetPlatform?: string): boolean;
export declare const checkIsUseCompilerPlugins: () => boolean;
export declare const sourcePathToTargetPath: (sourcePath: string) => string;
export declare function getCompilerPlugins(project: MiniProgramCore.IPreCompileProject): ("typescript" | "less" | "sass")[];
export declare function getSupportCodeFileExtSet(project: MiniProgramCore.IPreCompileProject): Set<string>;
export declare function isCodeFile(ext: string): boolean;
export declare function isMiniProgramCodeFile(ext: string): boolean;
export declare function compareSemVer(x: string, y: string): number;
