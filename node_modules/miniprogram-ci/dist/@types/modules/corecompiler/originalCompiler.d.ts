/// <reference types="node" />
import { MiniProgramCore, PluginJSON, ExtJSON, MiniProgramDevtools } from '../../types';
import { BaseCoreCompiler } from './baseCompiler';
import { OriginalCompileManager } from './original';
import { FileInfo } from './summer/graph/basegraph';
export declare class OriginalCompiler extends BaseCoreCompiler {
    readonly isSummer = false;
    compileManager: OriginalCompileManager | undefined;
    constructor(project: MiniProgramCore.IPreCompileProject);
    destroy(): void;
    init(): Promise<void>;
    isGameApp(): Promise<boolean | undefined>;
    protected checkProject(): void;
    getExtJSON(): Promise<ExtJSON.IExtJSON>;
    getAppJSON(): Promise<any>;
    getSiteMapJSON(): Promise<import("../../types").SiteMapJSON.ISiteMapJSON>;
    getPageJSON(pagePath: string): Promise<import("../../types").PageJSON.IPageJSON>;
    getGameJSON(): Promise<import("../../types").IGameJSON>;
    getPluginJSON(localPath?: string): Promise<PluginJSON.IPluginJSON>;
    getPluginPageJSON(pagePath: string): Promise<import("../../types").PageJSON.IPageJSON>;
    getPluginComponents(): Promise<string[]>;
    getWxssMap(_graphId: string, _wxssPath: string): void;
    getPluginJSFiles(): Promise<{
        jsFiles: string[];
        content: Record<string, string>;
    }>;
    getPluginWxssFiles(): Promise<{
        wxssFiles: string[];
        content: Record<string, string>;
    }>;
    getPluginWxmlAndWxsFiles(): Promise<{
        wxmlFiles: string[];
        wxsFiles: string[];
        content: Record<string, string>;
    }>;
    getMPFileInfo(): Promise<MiniProgramCore.IFileInfos>;
    getPluginFileInfo(): Promise<MiniProgramCore.IFileInfos>;
    checkThemeJSON(options: {
        themeLocation: string;
        isPlugin?: boolean;
    }): Promise<import("../../types").ThemeJSON.IThemeJSON>;
    compile(options: MiniProgramCore.ICompileOptions): Promise<{
        [x: string]: string | Buffer;
    }>;
    compileJS(options: {
        root: string;
        filePath: string;
        babelRoot: string;
        sourceCode?: string;
        setting: {
            es6: boolean;
            enhance: boolean;
            minify: boolean;
            disableUseStrict?: boolean;
            compileWorklet?: boolean;
        };
        onProgressUpdate: any;
        resultType?: MiniProgramCore.IResultType;
    }): Promise<{
        filePath: string;
        code: string;
        helpers: string[];
        map: string | import("source-map").RawSourceMap;
    }>;
    setLocale(locale: string): void;
    clearCache(): void;
    getPackageWxssFileList(_packagePath: string): Promise<never[]>;
    getPackageWxssFiles(_packagePath: string): Promise<{
        wxssFiles: string[];
        content: Record<string, string>;
    }>;
    getPackageWxmlAndWxsFiles(_packagePath: string): Promise<{
        wxmlFiles: string[];
        wxsFiles: string[];
        content: Record<string, string>;
    }>;
    getAllWxmlAndWxsFiles(): Promise<{
        wxmlFiles: string[];
        wxsFiles: string[];
        content: Record<string, string>;
    }>;
    getAllSortedJSFiles(): Promise<{
        otherJsFiles: string[];
        jsPagesFiles: string[];
        components: string[];
    }>;
    getMainPkgSortedJSFiles(): Promise<{
        hasAppJS: boolean;
        allFiles: string[];
        pageFiles: string[];
        functionalPageFiles: string[];
        workerFiles: string[];
        componentFiles: string[];
        otherFiles: string[];
    }>;
    getPackageFiles(graphId: MiniProgramDevtools.GraphId, root: string): Promise<FileInfo[]>;
    getSubPkgSortedJSFiles(_rootPath: string): Promise<{
        entryJS: string;
        allFiles: string[];
        pageFiles: string[];
        componentFiles: string[];
        otherFiles: string[];
    }>;
    getCompAndPagesOfConf(): Promise<{
        pages: Record<string, any>;
        comps: Record<string, any>;
    }>;
    getAllPageAndComponent(): Promise<string[]>;
}
