/// <reference types="node" />
import { MiniProgramCore, PageJSON, PluginJSON } from '../../../types';
import { setFSAgent } from '../../../utils/fs';
import { compile } from './compile/index';
import { getPageJSON } from './json/page/getPageJSON';
import { compileJS } from './compile/handler/js';
import { getDevPluginJSON as getPluginJSON } from './json/plugin/plugin';
import { getPluginPageJSON } from './json/plugin/pluginPage';
import { getSiteMapJSON } from './json/sitemap';
import { checkThemeJSON, mergeThemeJSONToAppJSON, mergeThemeJSONToPageJSON } from './json/theme';
import { schemaValidate } from './validate/schemaValidate';
import { packNpm, packNpmManually } from './npm/packnpm';
export * as partialAnalyse from './analyse/partial';
declare const setLocale: (tag: string) => void;
declare function getAppJSON(project: MiniProgramCore.IPreCompileProject): Promise<import("../../../types").AppJSON.IAppJSON>;
declare function getExtJSON(project: MiniProgramCore.IPreCompileProject): Promise<import("../../../types").ExtJSON.IExtJSON | undefined>;
declare function getGameJSON(project: MiniProgramCore.IPreCompileProject): Promise<import("../../../types").IGameJSON>;
declare function clearCache(): void;
export { getAppJSON, getExtJSON, getPageJSON, getGameJSON, getPluginJSON, getPluginPageJSON, checkThemeJSON, getSiteMapJSON, schemaValidate, mergeThemeJSONToAppJSON, mergeThemeJSONToPageJSON, packNpm, packNpmManually, compileJS, compile, clearCache, setLocale, setFSAgent, };
export declare class OriginalCompileManager {
    project: MiniProgramCore.IPreCompileProject;
    constructor(project: MiniProgramCore.IPreCompileProject);
    getAppJSON(): Promise<import("../../../types").AppJSON.IAppJSON>;
    getExtJSON(): Promise<import("../../../types").ExtJSON.IExtJSON | undefined>;
    getPageJSON(options: {
        miniprogramRoot: string;
        pagePath: string;
    }): Promise<PageJSON.IPageJSON>;
    getGameJSON(): Promise<import("../../../types").IGameJSON>;
    getPluginJSON(...args: any[]): Promise<PluginJSON.IPluginJSON>;
    checkThemeJSON(options: any): import("../../../types").ThemeJSON.IThemeJSON;
    getSiteMapJSON(): import("../../../types").SiteMapJSON.ISiteMapJSON;
    getPluginPageJSON: typeof getPluginPageJSON;
    schemaValidate: typeof schemaValidate;
    mergeThemeJSONToAppJSON: typeof mergeThemeJSONToAppJSON;
    mergeThemeJSONToPageJSON: typeof mergeThemeJSONToPageJSON;
    packNpm(...args: any[]): Promise<MiniProgramCore.IWarnItem[]>;
    packNpmManually: typeof packNpmManually;
    compileJS(filePath: string, options: any): Promise<{
        filePath: string;
        code: string;
        helpers: string[];
        map: string | import("source-map").RawSourceMap;
    }>;
    compile(options: MiniProgramCore.ICompileOptions): Promise<{
        [x: string]: string | Buffer;
    }>;
    clearCache: typeof clearCache;
    setLocale: (tag: string) => void;
    setFSAgent: typeof setFSAgent;
}
