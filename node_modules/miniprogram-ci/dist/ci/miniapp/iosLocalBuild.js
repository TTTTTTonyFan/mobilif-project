"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getIOSLocalBuild=void 0;const tslib_1=require("tslib"),getcompiler_1=require("../getcompiler"),archive=tslib_1.__importStar(require("./archive")),log=tslib_1.__importStar(require("../../utils/log")),path=require("path"),fse=require("fs-extra");class IOSLocalBuild{constructor(e){this.iosDir="",this.project=e.project,this.ciOpts=e}async buildArchive(e,i){const t=path.join(e,"MiniApp.bundle/module");fse.existsSync(t)&&fse.removeSync(t);const{version:o,desc:r,miniappPkgType:s,remoteDebugEnable:l,useCloudSync:c}=i;await archive.buildProjectArchive(this.ciOpts,{version:o,desc:r,targetPlatform:"mini-ios",outputDir:t,miniappOptions:{miniappPkgType:s,remoteDebugEnable:l,useCloudSync:c,archVersion:1}})}async build(e,i,t){let o;try{await this.buildArchive(t,e),o=await(0,getcompiler_1.getBuilder)(this.project,{devtoolMessagehub:{showBuildLog:(e,i,t)=>{log.info("miniprogram-ci native compile",i,t)}}});const r=await o.getNativeCompiler();await r.buildIOSIPA(i)}catch(e){throw e}finally{null==o||o.destroy()}}}const getIOSLocalBuild=e=>new IOSLocalBuild(e);exports.getIOSLocalBuild=getIOSLocalBuild;