"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.tryGetInputSourceMap=void 0;const tslib_1=require("tslib"),path_1=tslib_1.__importDefault(require("path")),fs_extra_1=tslib_1.__importDefault(require("fs-extra")),jsonParse_1=require("../../../../utils/jsonParse"),sourcemap=()=>require("source-map"),insertSourcesContent=async(e,t)=>{if(Array.isArray(e.sources)&&!Array.isArray(e.sourcesContent)){const r=e.sourcesContent;try{const r=path_1.default.posix.dirname(t),s=[],{sources:a}=e;for(const e of a){const t=await fs_extra_1.default.readFile(path_1.default.posix.join(r,e),"utf-8");s.push(t)}e.sourcesContent=s}catch(t){e.sourcesContent=r}}};async function tryGetInputSourceMap(e,t){try{const r=/\/\/[#|@] sourceMappingURL=[\s]*(\S*)[\s]*$/m.exec(e),s=path_1.default.posix.dirname(t),a=path_1.default.posix.basename(t);let o;if(null==r?void 0:r[1])if(r[1].endsWith(".js.map"))o=await fs_extra_1.default.readFile(path_1.default.posix.join(s,r[1]),"utf-8");else{const e=r[1].split("base64,")[1];o=Buffer.from(e,"base64").toString()}else{const e=path_1.default.posix.join(s,a+".map");fs_extra_1.default.existsSync(e)&&(o=await fs_extra_1.default.readFile(e,"utf-8"))}if(o){const e=(0,jsonParse_1.jsonParse)(o);new(require("source-map").SourceMapConsumer)(e);return await insertSourcesContent(e,t),e}}catch(e){console.log(`try to get input sourcemap of ${t} catch error ${e}`)}}exports.tryGetInputSourceMap=tryGetInputSourceMap;