"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PluginConf=void 0;const tslib_1=require("tslib"),path_1=tslib_1.__importDefault(require("path")),plugin_1=require("../../original/json/plugin/plugin"),pluginPage_1=require("../../original/json/plugin/pluginPage"),locales_1=tslib_1.__importDefault(require("../../../../utils/locales/locales")),util_1=require("./util"),baseconf_1=require("./baseconf");class PluginConf extends baseconf_1.MiniProgramBaseConf{constructor(){super(...arguments),this.pages=new Map,this.comps=new Map}destroy(){this.plugin=void 0}async getConf(t){return await this.build(t),{plugin:this.plugin,pages:Object.fromEntries(this.pages.entries()),comps:Object.fromEntries(this.comps.entries())}}async resetState(){this.plugin=void 0,this.pages.clear(),this.comps.clear()}async load(t){const o=await t.run(locales_1.default.config.SUMMER_COMPILE.format("plugin.json"),()=>(0,plugin_1.getDevPluginJSON)(this.proxyProject));this.plugin=o;const i=new Set;for(const t of Object.values(o.pages||{}))i.add(t);await t.run(locales_1.default.config.SUMMER_COMPILE_PLUGIN_PAGE_JSON.format(i.size),async()=>{for(const[t]of i.entries())(0,util_1.isPluginPath)(t)||await this.loadPage(t);for(const t of Object.values(o.publicComponents||{}))(0,util_1.isPluginPath)(t)||await this.loadComp(t,t,"plugin.json");for(const t of Object.values(o.usingComponents||{}))(0,util_1.isPluginPath)(t)||await this.loadComp(t,t,"plugin.json")})}async loadPage(t){const o=await(0,pluginPage_1.getPluginPageJSON)({project:this.proxyProject,root:this.root,filePath:path_1.default.posix.join(this.root,t+".json")});this.pages.set(t,o);const i=async o=>{if((0,util_1.isPluginPath)(o))return;const i=(0,util_1.resolvePath)(t,o);await this.loadComp(i,o,t)};for(const t of Object.values(o.usingComponents||{}))await i(t)}async loadComp(t,o,i){if(this.comps.has(t))return;if(!this.proxyProject.stat(this.root,t+".json"))throw new Error(`[summer-compiler] Couldn't found the '${o}.json' file relative to '${i}'`);const s=await(0,pluginPage_1.getPluginPageJSON)({project:this.proxyProject,root:this.root,filePath:path_1.default.posix.join(this.root,t+".json")});this.comps.set(t,s);const e=async o=>{if((0,util_1.isPluginPath)(o))return;const i=(0,util_1.resolvePath)(t,o);await this.loadComp(i,o,t)};for(const t of Object.values(s.usingComponents||{}))await e(t)}}exports.PluginConf=PluginConf;