// MobiLiF Prisma Schema
// 兼容阿里云MySQL 8.0
// 支持读写分离和连接池配置

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"

  // 性能优化
  previewFeatures = ["fullTextSearch", "fullTextIndex", "metrics", "tracing", "views"]

  // 二进制配置
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  // 关系模式
  relationMode = "prisma"
}

// ========================================
// 用户模块
// ========================================

model User {
  id                   BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  uuid                 String       @unique @db.VarChar(36)
  unionId              String?      @unique @map("union_id") @db.VarChar(100)
  openId               String?      @unique @map("open_id") @db.VarChar(100)
  phone                String?      @unique @db.VarChar(20)
  email                String?      @unique @db.VarChar(100)
  username             String?      @unique @db.VarChar(50)
  nickname             String       @db.VarChar(50)
  realName             String?      @map("real_name") @db.VarChar(50)
  avatar               String?      @db.VarChar(500)
  gender               Int          @default(0) @db.TinyInt // 0-未知，1-男，2-女
  birthday             DateTime?    @db.Date
  age                  Int?         @db.TinyInt
  height               Decimal?     @db.Decimal(5, 2)
  weight               Decimal?     @db.Decimal(5, 2)
  fitnessLevel         FitnessLevel @default(beginner) @map("fitness_level")
  fitnessGoals         Json?        @map("fitness_goals")
  bio                  String?      @db.Text
  location             String?      @db.VarChar(100)
  timezone             String       @default("Asia/Shanghai") @db.VarChar(50)
  language             String       @default("zh-CN") @db.VarChar(10)
  status               Int          @default(1) @db.TinyInt // 0-禁用，1-正常，2-审核中
  emailVerified        Boolean      @default(false) @map("email_verified")
  phoneVerified        Boolean      @default(false) @map("phone_verified")
  privacySettings      Json?        @map("privacy_settings")
  notificationSettings Json?        @map("notification_settings")
  lastLoginAt          DateTime?    @map("last_login_at")
  lastLoginIp          String?      @map("last_login_ip") @db.VarChar(45)
  loginCount           Int          @default(0) @map("login_count") @db.UnsignedInt
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")
  deletedAt            DateTime?    @map("deleted_at")

  // 关联关系
  auths             UserAuth[]
  sessions          UserSession[]
  userPoints        UserPoints?
  skillProgress     UserSkillProgress[]
  pointTransactions PointTransaction[]
  bookings          Booking[]
  posts             Post[]
  friendships       Friendship[]        @relation("UserFriendships")
  friendOf          Friendship[]        @relation("UserFriendOf")
  ownedGyms         Gym[]               @relation("GymOwner")
  trainers          Trainer[]

  @@index([unionId])
  @@index([openId])
  @@index([phone])
  @@index([email])
  @@index([username])
  @@index([status])
  @@index([fitnessLevel])
  @@index([location])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([status, createdAt])
  @@map("users")
}

model UserAuth {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  userId          BigInt    @map("user_id") @db.UnsignedBigInt
  authType        AuthType  @map("auth_type")
  authKey         String    @map("auth_key") @db.VarChar(100)
  authSecret      String?   @map("auth_secret") @db.VarChar(200)
  salt            String?   @db.VarChar(32)
  expiresAt       DateTime? @map("expires_at")
  isVerified      Boolean   @default(false) @map("is_verified")
  verifyToken     String?   @map("verify_token") @db.VarChar(100)
  verifyExpiresAt DateTime? @map("verify_expires_at")
  failedAttempts  Int       @default(0) @map("failed_attempts") @db.TinyInt
  lockedUntil     DateTime? @map("locked_until")
  lastUsedAt      DateTime? @map("last_used_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([authType, authKey])
  @@index([userId])
  @@index([authType])
  @@index([verifyToken])
  @@map("user_auths")
}

model UserSession {
  id             BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  userId         BigInt      @map("user_id") @db.UnsignedBigInt
  sessionId      String      @unique @map("session_id") @db.VarChar(128)
  deviceId       String?     @map("device_id") @db.VarChar(100)
  deviceType     DeviceType? @map("device_type")
  deviceInfo     Json?       @map("device_info")
  ipAddress      String?     @map("ip_address") @db.VarChar(45)
  userAgent      String?     @map("user_agent") @db.Text
  location       String?     @db.VarChar(100)
  expiresAt      DateTime    @map("expires_at")
  isActive       Boolean     @default(true) @map("is_active")
  lastActivityAt DateTime    @default(now()) @map("last_activity_at")
  createdAt      DateTime    @default(now()) @map("created_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceId])
  @@index([expiresAt])
  @@index([isActive])
  @@map("user_sessions")
}

// ========================================
// 场馆模块
// ========================================

model Gym {
  id                   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uuid                 String    @unique @db.VarChar(36)
  name                 String    @db.VarChar(100)
  nameEn               String?   @map("name_en") @db.VarChar(100)
  description          String?   @db.Text
  shortDescription     String?   @map("short_description") @db.VarChar(200)
  address              String    @db.VarChar(200)
  district             String    @db.VarChar(50)
  city                 String    @db.VarChar(50)
  province             String    @db.VarChar(50)
  country              String    @default("China") @db.VarChar(50)
  postalCode           String?   @map("postal_code") @db.VarChar(20)
  latitude             Decimal   @db.Decimal(10, 7)
  longitude            Decimal   @db.Decimal(10, 7)
  phone                String?   @db.VarChar(20)
  email                String?   @db.VarChar(100)
  website              String?   @db.VarChar(200)
  socialMedia          Json?     @map("social_media")
  images               Json?
  logo                 String?   @db.VarChar(500)
  facilities           Json?
  equipment            Json?
  amenities            Json?
  openingHours         Json      @map("opening_hours")
  holidayHours         Json?     @map("holiday_hours")
  priceRange           String?   @map("price_range") @db.VarChar(50)
  pricingInfo          Json?     @map("pricing_info")
  capacity             Int?
  areaSize             Decimal?  @map("area_size") @db.Decimal(8, 2)
  parkingInfo          Json?     @map("parking_info")
  transportInfo        Json?     @map("transport_info")
  rating               Decimal   @default(0.00) @db.Decimal(3, 2)
  reviewCount          Int       @default(0) @map("review_count") @db.UnsignedInt
  viewCount            Int       @default(0) @map("view_count") @db.UnsignedInt
  favoriteCount        Int       @default(0) @map("favorite_count") @db.UnsignedInt
  checkinCount         Int       @default(0) @map("checkin_count") @db.UnsignedInt
  status               Int       @default(1) @db.TinyInt // 0-停业，1-营业，2-装修中
  verified             Boolean   @default(false)
  featured             Boolean   @default(false)
  gymType              GymType   @default(comprehensive) @map("gym_type")
  crossfitCertified    Boolean   @default(false) @map("crossfit_certified")
  supportedPrograms    Json?     @map("supported_programs") // ["CrossFit", "Olympic Lifting", "Hyrox", "Gymnastics"]
  tags                 Json?
  businessLicense      String?   @map("business_license") @db.VarChar(200)
  insuranceInfo        Json?     @map("insurance_info")
  safetyCertifications Json?     @map("safety_certifications")
  ownerId              BigInt?   @map("owner_id") @db.UnsignedBigInt
  managerIds           Json?     @map("manager_ids")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  deletedAt            DateTime? @map("deleted_at")

  // 关联关系
  owner    User?     @relation("GymOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  trainers Trainer[]
  classes  Class[]
  posts    Post[]

  @@index([city, district])
  @@index([latitude, longitude])
  @@index([status])
  @@index([verified])
  @@index([featured])
  @@index([rating])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([city, status])
  @@map("gyms")
}

model Trainer {
  id               BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  uuid             String         @unique @db.VarChar(36)
  userId           BigInt         @map("user_id") @db.UnsignedBigInt
  gymId            BigInt         @map("gym_id") @db.UnsignedBigInt
  employeeId       String?        @map("employee_id") @db.VarChar(50)
  name             String         @db.VarChar(50)
  nameEn           String?        @map("name_en") @db.VarChar(50)
  avatar           String?        @db.VarChar(500)
  title            String?        @db.VarChar(100)
  level            TrainerLevel   @default(junior)
  specialties      Json?
  certifications   Json?
  education        Json?
  experienceYears  Int?           @map("experience_years")
  bio              String?        @db.Text
  languages        Json?
  availability     Json?
  hourlyRate       Decimal?       @map("hourly_rate") @db.Decimal(8, 2)
  pricingTiers     Json?          @map("pricing_tiers")
  rating           Decimal        @default(0.00) @db.Decimal(3, 2)
  reviewCount      Int            @default(0) @map("review_count") @db.UnsignedInt
  classCount       Int            @default(0) @map("class_count") @db.UnsignedInt
  studentCount     Int            @default(0) @map("student_count") @db.UnsignedInt
  achievementCount Int            @default(0) @map("achievement_count") @db.UnsignedInt
  socialMedia      Json?          @map("social_media")
  contactInfo      Json?          @map("contact_info")
  emergencyContact Json?          @map("emergency_contact")
  status           Int            @default(1) @db.TinyInt // 0-离职，1-在职，2-休假
  employmentType   EmploymentType @default(full_time) @map("employment_type")
  startDate        DateTime?      @map("start_date") @db.Date
  endDate          DateTime?      @map("end_date") @db.Date
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  deletedAt        DateTime?      @map("deleted_at")

  // 关联关系
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  gym             Gym                 @relation(fields: [gymId], references: [id], onDelete: Cascade)
  classes         Class[]
  certifiedSkills UserSkillProgress[] @relation("CertifiedBy")

  @@unique([userId, gymId])
  @@index([gymId])
  @@index([status])
  @@index([level])
  @@index([rating])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("trainers")
}

// ========================================
// 课程模块
// ========================================

model ClassCategory {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  name        String   @db.VarChar(100)
  nameEn      String?  @map("name_en") @db.VarChar(100)
  description String?  @db.Text
  icon        String?  @db.VarChar(500)
  color       String?  @db.VarChar(7)
  parentId    BigInt?  @map("parent_id") @db.UnsignedBigInt
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // 自关联
  parent   ClassCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children ClassCategory[] @relation("CategoryHierarchy")

  // 关联关系
  classes Class[]

  @@index([parentId])
  @@index([sortOrder])
  @@index([isActive])
  @@map("class_categories")
}

model Class {
  id                   BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  uuid                 String          @unique @db.VarChar(36)
  gymId                BigInt          @map("gym_id") @db.UnsignedBigInt
  trainerId            BigInt          @map("trainer_id") @db.UnsignedBigInt
  categoryId           BigInt?         @map("category_id") @db.UnsignedBigInt
  name                 String          @db.VarChar(100)
  nameEn               String?         @map("name_en") @db.VarChar(100)
  description          String?         @db.Text
  shortDescription     String?         @map("short_description") @db.VarChar(200)
  type                 String          @db.VarChar(50)
  level                ClassLevel
  duration             Int // 分钟
  maxParticipants      Int             @map("max_participants")
  minParticipants      Int             @default(1) @map("min_participants")
  currentParticipants  Int             @default(0) @map("current_participants")
  price                Decimal         @db.Decimal(8, 2)
  originalPrice        Decimal?        @map("original_price") @db.Decimal(8, 2)
  currency             String          @default("CNY") @db.VarChar(3)
  discountInfo         Json?           @map("discount_info")
  packageInfo          Json?           @map("package_info")
  equipmentNeeded      Json?           @map("equipment_needed")
  equipmentProvided    Json?           @map("equipment_provided")
  requirements         Json?
  benefits             Json?
  startTime            DateTime        @map("start_time")
  endTime              DateTime        @map("end_time")
  timezone             String          @default("Asia/Shanghai") @db.VarChar(50)
  recurrenceRule       Json?           @map("recurrence_rule")
  location             String?         @db.VarChar(200)
  room                 String?         @db.VarChar(50)
  onlineMeetingUrl     String?         @map("online_meeting_url") @db.VarChar(500)
  isOnline             Boolean         @default(false) @map("is_online")
  isHybrid             Boolean         @default(false) @map("is_hybrid")
  registrationDeadline DateTime?       @map("registration_deadline")
  cancellationDeadline DateTime?       @map("cancellation_deadline")
  waitingListEnabled   Boolean         @default(true) @map("waiting_list_enabled")
  autoConfirm          Boolean         @default(true) @map("auto_confirm")
  requiresApproval     Boolean         @default(false) @map("requires_approval")
  tags                 Json?
  images               Json?
  videoPreview         String?         @map("video_preview") @db.VarChar(500)
  materials            Json?
  status               Int             @default(1) @db.TinyInt // 0-取消，1-正常，2-已满，3-已结束
  visibility           ClassVisibility @default(public)
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  deletedAt            DateTime?       @map("deleted_at")

  // 关联关系
  gym      Gym            @relation(fields: [gymId], references: [id], onDelete: Cascade)
  trainer  Trainer        @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  category ClassCategory? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookings Booking[]
  posts    Post[]

  @@index([gymId])
  @@index([trainerId])
  @@index([categoryId])
  @@index([startTime])
  @@index([type])
  @@index([level])
  @@index([status])
  @@index([visibility])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([gymId, startTime])
  @@map("classes")
}

model Booking {
  id                 BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  uuid               String        @unique @db.VarChar(36)
  bookingNo          String        @unique @map("booking_no") @db.VarChar(32)
  userId             BigInt        @map("user_id") @db.UnsignedBigInt
  classId            BigInt        @map("class_id") @db.UnsignedBigInt
  participants       Int           @default(1)
  companionInfo      Json?         @map("companion_info")
  bookingTime        DateTime      @default(now()) @map("booking_time")
  confirmedAt        DateTime?     @map("confirmed_at")
  checkedInAt        DateTime?     @map("checked_in_at")
  checkedOutAt       DateTime?     @map("checked_out_at")
  status             Int           @default(1) @db.TinyInt // 0-取消，1-预约成功，2-已确认，3-已签到，4-已完成，5-缺席，6-候补中
  cancellationReason String?       @map("cancellation_reason") @db.VarChar(200)
  cancellationTime   DateTime?     @map("cancellation_time")
  cancellationFee    Decimal       @default(0.00) @map("cancellation_fee") @db.Decimal(8, 2)
  noShowFee          Decimal       @default(0.00) @map("no_show_fee") @db.Decimal(8, 2)
  paymentStatus      Int           @default(0) @map("payment_status") @db.TinyInt // 0-未支付，1-已支付，2-部分退款，3-全额退款
  paymentMethod      String?       @map("payment_method") @db.VarChar(20)
  paymentAmount      Decimal?      @map("payment_amount") @db.Decimal(8, 2)
  discountAmount     Decimal       @default(0.00) @map("discount_amount") @db.Decimal(8, 2)
  finalAmount        Decimal?      @map("final_amount") @db.Decimal(8, 2)
  currency           String        @default("CNY") @db.VarChar(3)
  paymentTime        DateTime?     @map("payment_time")
  paymentId          String?       @map("payment_id") @db.VarChar(100)
  refundAmount       Decimal       @default(0.00) @map("refund_amount") @db.Decimal(8, 2)
  refundTime         DateTime?     @map("refund_time")
  refundId           String?       @map("refund_id") @db.VarChar(100)
  source             BookingSource @default(app)
  userAgent          String?       @map("user_agent") @db.Text
  ipAddress          String?       @map("ip_address") @db.VarChar(45)
  specialRequests    String?       @map("special_requests") @db.Text
  notes              String?       @db.Text
  rating             Int?          @db.TinyInt // 1-5
  review             String?       @db.Text
  reviewedAt         DateTime?     @map("reviewed_at")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  // 关联关系
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, classId])
  @@index([classId])
  @@index([status])
  @@index([paymentStatus])
  @@index([bookingTime])
  @@index([paymentId])
  @@index([createdAt])
  @@index([userId, status])
  @@map("bookings")
}

// ========================================
// 技能地图模块
// ========================================

model SkillNode {
  id                   BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  uuid                 String          @unique @db.VarChar(36)
  code                 String          @unique @db.VarChar(50)
  name                 String          @db.VarChar(100)
  nameEn               String?         @map("name_en") @db.VarChar(100)
  description          String?         @db.Text
  shortDescription     String?         @map("short_description") @db.VarChar(200)
  category             String          @db.VarChar(50)
  subcategory          String?         @db.VarChar(50)
  level                Int             @db.TinyInt // 1-5
  difficulty           SkillDifficulty
  prerequisites        Json?
  pointsRequired       Int             @default(0) @map("points_required")
  experienceRequired   Int             @default(0) @map("experience_required")
  estimatedTimeHours   Int?            @map("estimated_time_hours")
  demonstrationVideo   String?         @map("demonstration_video") @db.VarChar(500)
  tutorialContent      Json?           @map("tutorial_content")
  verificationCriteria Json            @map("verification_criteria")
  verificationMethods  Json?           @map("verification_methods")
  safetyNotes          String?         @map("safety_notes") @db.Text
  commonMistakes       Json?           @map("common_mistakes")
  tips                 Json?
  relatedSkills        Json?           @map("related_skills")
  progressionPath      Json?           @map("progression_path")
  equipmentNeeded      Json?           @map("equipment_needed")
  muscleGroups         Json?           @map("muscle_groups")
  benefits             Json?
  positionX            Int             @map("position_x")
  positionY            Int             @map("position_y")
  mapSection           String?         @map("map_section") @db.VarChar(50)
  icon                 String?         @db.VarChar(200)
  iconLocked           String?         @map("icon_locked") @db.VarChar(200)
  iconCompleted        String?         @map("icon_completed") @db.VarChar(200)
  backgroundColor      String?         @map("background_color") @db.VarChar(7)
  borderColor          String?         @map("border_color") @db.VarChar(7)
  tags                 Json?
  metadata             Json?
  isActive             Boolean         @default(true) @map("is_active")
  isFeatured           Boolean         @default(false) @map("is_featured")
  sortOrder            Int             @default(0) @map("sort_order")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  deletedAt            DateTime?       @map("deleted_at")

  // 关联关系
  userProgress UserSkillProgress[]

  @@index([category])
  @@index([subcategory])
  @@index([level])
  @@index([difficulty])
  @@index([positionX, positionY])
  @@index([mapSection])
  @@index([isActive])
  @@index([sortOrder])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("skill_nodes")
}

model UserSkillProgress {
  id                     BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  userId                 BigInt              @map("user_id") @db.UnsignedBigInt
  skillId                BigInt              @map("skill_id") @db.UnsignedBigInt
  status                 Int                 @default(0) @db.TinyInt // 0-未解锁，1-已解锁，2-进行中，3-已完成，4-已认证
  progressPercentage     Decimal             @default(0.00) @map("progress_percentage") @db.Decimal(5, 2)
  attempts               Int                 @default(0)
  successfulAttempts     Int                 @default(0) @map("successful_attempts")
  bestScore              Decimal?            @map("best_score") @db.Decimal(8, 2)
  latestScore            Decimal?            @map("latest_score") @db.Decimal(8, 2)
  practiceHours          Decimal             @default(0.00) @map("practice_hours") @db.Decimal(6, 2)
  practiceSessions       Int                 @default(0) @map("practice_sessions")
  videoSubmissions       Json?               @map("video_submissions")
  instructorFeedback     Json?               @map("instructor_feedback")
  peerReviews            Json?               @map("peer_reviews")
  selfAssessment         Json?               @map("self_assessment")
  difficultyRating       Int?                @map("difficulty_rating") @db.TinyInt // 1-5
  notes                  String?             @db.Text
  milestones             Json?
  unlockedAt             DateTime?           @map("unlocked_at")
  startedAt              DateTime?           @map("started_at")
  completedAt            DateTime?           @map("completed_at")
  certifiedAt            DateTime?           @map("certified_at")
  certifiedBy            BigInt?             @map("certified_by") @db.UnsignedBigInt
  certificationLevel     CertificationLevel? @map("certification_level")
  certificationScore     Decimal?            @map("certification_score") @db.Decimal(5, 2)
  certificationNotes     String?             @map("certification_notes") @db.Text
  certificationVideo     String?             @map("certification_video") @db.VarChar(500)
  certificationExpiresAt DateTime?           @map("certification_expires_at")
  lastPracticedAt        DateTime?           @map("last_practiced_at")
  reminderCount          Int                 @default(0) @map("reminder_count")
  createdAt              DateTime            @default(now()) @map("created_at")
  updatedAt              DateTime            @updatedAt @map("updated_at")

  // 关联关系
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill     SkillNode @relation(fields: [skillId], references: [id], onDelete: Cascade)
  certifier Trainer?  @relation("CertifiedBy", fields: [certifiedBy], references: [id], onDelete: SetNull)

  @@unique([userId, skillId])
  @@index([skillId])
  @@index([status])
  @@index([certifiedBy])
  @@index([certificationLevel])
  @@index([progressPercentage])
  @@index([certifiedAt])
  @@index([createdAt])
  @@index([userId, status])
  @@map("user_skill_progress")
}

// ========================================
// 游戏化系统
// ========================================

model UserPoints {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  userId              BigInt    @unique @map("user_id") @db.UnsignedBigInt
  totalPoints         Int       @default(0) @map("total_points")
  availablePoints     Int       @default(0) @map("available_points")
  usedPoints          Int       @default(0) @map("used_points")
  expiredPoints       Int       @default(0) @map("expired_points")
  level               Int       @default(1)
  experience          Int       @default(0)
  nextLevelExperience Int       @default(1000) @map("next_level_experience")
  rank                Int?
  rankUpdatedAt       DateTime? @map("rank_updated_at")
  streakDays          Int       @default(0) @map("streak_days")
  maxStreakDays       Int       @default(0) @map("max_streak_days")
  lastCheckin         DateTime? @map("last_checkin") @db.Date
  totalCheckins       Int       @default(0) @map("total_checkins")
  weeklyPoints        Int       @default(0) @map("weekly_points")
  monthlyPoints       Int       @default(0) @map("monthly_points")
  yearlyPoints        Int       @default(0) @map("yearly_points")
  lifetimePoints      Int       @default(0) @map("lifetime_points")
  bonusMultiplier     Decimal   @default(1.00) @map("bonus_multiplier") @db.Decimal(3, 2)
  vipLevel            Int       @default(0) @map("vip_level") @db.TinyInt
  seasonPoints        Int       @default(0) @map("season_points")
  seasonRank          Int?      @map("season_rank")
  achievementsCount   Int       @default(0) @map("achievements_count")
  badgesCount         Int       @default(0) @map("badges_count")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([level])
  @@index([totalPoints])
  @@index([rank])
  @@index([seasonRank])
  @@index([vipLevel])
  @@map("user_points")
}

model PointTransaction {
  id            BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  uuid          String               @unique @db.VarChar(36)
  userId        BigInt               @map("user_id") @db.UnsignedBigInt
  type          PointTransactionType
  points        Int
  source        String               @db.VarChar(50)
  sourceId      String?              @map("source_id") @db.VarChar(100)
  referenceType String?              @map("reference_type") @db.VarChar(50)
  referenceId   BigInt?              @map("reference_id") @db.UnsignedBigInt
  description   String?              @db.VarChar(200)
  multiplier    Decimal              @default(1.00) @db.Decimal(3, 2)
  bonusPoints   Int                  @default(0) @map("bonus_points")
  balanceBefore Int                  @map("balance_before")
  balanceAfter  Int                  @map("balance_after")
  expiresAt     DateTime?            @map("expires_at")
  expiredAt     DateTime?            @map("expired_at")
  isExpired     Boolean              @default(false) @map("is_expired")
  batchId       String?              @map("batch_id") @db.VarChar(50)
  ipAddress     String?              @map("ip_address") @db.VarChar(45)
  userAgent     String?              @map("user_agent") @db.Text
  metadata      Json?
  createdAt     DateTime             @default(now()) @map("created_at")

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([source])
  @@index([referenceType, referenceId])
  @@index([expiresAt])
  @@index([batchId])
  @@index([createdAt])
  @@map("point_transactions")
}

// ========================================
// 社交模块
// ========================================

model Friendship {
  id                 BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  userId             BigInt            @map("user_id") @db.UnsignedBigInt
  friendId           BigInt            @map("friend_id") @db.UnsignedBigInt
  status             Int               @default(0) @db.TinyInt // 0-申请中，1-已接受，2-已拒绝，3-已删除，4-已拉黑
  initiatorId        BigInt            @map("initiator_id") @db.UnsignedBigInt
  message            String?           @db.VarChar(200)
  source             FriendshipSource?
  mutualFriendsCount Int               @default(0) @map("mutual_friends_count")
  interactionScore   Decimal           @default(0.00) @map("interaction_score") @db.Decimal(5, 2)
  lastInteractionAt  DateTime?         @map("last_interaction_at")
  requestedAt        DateTime          @default(now()) @map("requested_at")
  respondedAt        DateTime?         @map("responded_at")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")

  // 关联关系
  user   User @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("UserFriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([friendId])
  @@index([status])
  @@index([initiatorId])
  @@index([source])
  @@index([createdAt])
  @@map("friendships")
}

model Post {
  id                  BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  uuid                String           @unique @db.VarChar(36)
  userId              BigInt           @map("user_id") @db.UnsignedBigInt
  type                PostType         @default(text)
  content             String           @db.Text
  images              Json?
  videos              Json?
  thumbnail           String?          @db.VarChar(500)
  location            String?          @db.VarChar(100)
  locationCoordinates Json?            @map("location_coordinates")
  gymId               BigInt?          @map("gym_id") @db.UnsignedBigInt
  classId             BigInt?          @map("class_id") @db.UnsignedBigInt
  workoutData         Json?            @map("workout_data")
  achievementData     Json?            @map("achievement_data")
  hashtags            Json?
  mentions            Json?
  privacy             Int              @default(1) @db.TinyInt // 0-私密，1-公开，2-好友可见，3-关注者可见
  allowComments       Boolean          @default(true) @map("allow_comments")
  allowShares         Boolean          @default(true) @map("allow_shares")
  likeCount           Int              @default(0) @map("like_count") @db.UnsignedInt
  commentCount        Int              @default(0) @map("comment_count") @db.UnsignedInt
  shareCount          Int              @default(0) @map("share_count") @db.UnsignedInt
  viewCount           Int              @default(0) @map("view_count") @db.UnsignedInt
  saveCount           Int              @default(0) @map("save_count") @db.UnsignedInt
  reportCount         Int              @default(0) @map("report_count") @db.UnsignedInt
  engagementScore     Decimal          @default(0.00) @map("engagement_score") @db.Decimal(8, 2)
  trendingScore       Decimal          @default(0.00) @map("trending_score") @db.Decimal(8, 2)
  qualityScore        Decimal          @default(0.00) @map("quality_score") @db.Decimal(5, 2)
  isFeatured          Boolean          @default(false) @map("is_featured")
  isPinned            Boolean          @default(false) @map("is_pinned")
  isDeleted           Boolean          @default(false) @map("is_deleted")
  isBlocked           Boolean          @default(false) @map("is_blocked")
  deletedReason       String?          @map("deleted_reason") @db.VarChar(200)
  moderationStatus    ModerationStatus @default(approved) @map("moderation_status")
  moderatedAt         DateTime?        @map("moderated_at")
  moderatedBy         BigInt?          @map("moderated_by") @db.UnsignedBigInt
  scheduledAt         DateTime?        @map("scheduled_at")
  publishedAt         DateTime?        @map("published_at")
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")

  // 关联关系
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  gym   Gym?   @relation(fields: [gymId], references: [id], onDelete: SetNull)
  class Class? @relation(fields: [classId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userId])
  @@index([type])
  @@index([gymId])
  @@index([classId])
  @@index([privacy])
  @@index([isDeleted])
  @@index([isFeatured])
  @@index([moderationStatus])
  @@index([publishedAt])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@map("posts")
}

// ========================================
// 系统配置
// ========================================

model SystemConfig {
  id             Int        @id @default(autoincrement()) @db.UnsignedInt
  configKey      String     @unique @map("config_key") @db.VarChar(100)
  configValue    String?    @map("config_value") @db.LongText
  configType     ConfigType @default(string) @map("config_type")
  category       String     @default("general") @db.VarChar(50)
  description    String?    @db.VarChar(200)
  isPublic       Boolean    @default(false) @map("is_public")
  isReadonly     Boolean    @default(false) @map("is_readonly")
  validationRule String?    @map("validation_rule") @db.VarChar(200)
  defaultValue   String?    @map("default_value") @db.Text
  options        Json?
  sortOrder      Int        @default(0) @map("sort_order")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@index([category])
  @@index([isPublic])
  @@index([sortOrder])
  @@map("system_configs")
}

// ========================================
// 枚举定义
// ========================================

enum FitnessLevel {
  beginner
  intermediate
  advanced
  expert
}

enum AuthType {
  wechat
  phone
  email
  username
  apple
  google
}

enum DeviceType {
  ios
  android
  web
  wechat
}

enum TrainerLevel {
  junior
  intermediate
  senior
  master
}

enum EmploymentType {
  full_time
  part_time
  freelance
  intern
}

enum ClassLevel {
  beginner
  intermediate
  advanced
  all_levels
}

enum ClassVisibility {
  public
  private
  members_only
}

enum BookingSource {
  app
  web
  wechat
  api
}

enum SkillDifficulty {
  easy
  medium
  hard
  expert
}

enum CertificationLevel {
  bronze
  silver
  gold
  platinum
}

enum PointTransactionType {
  earn
  spend
  expired
  bonus
  refund
  penalty
}

enum FriendshipSource {
  search
  recommendation
  qr_code
  phone
  gym
  class
}

enum PostType {
  text
  image
  video
  workout
  achievement
  checkin
  share
}

enum ModerationStatus {
  pending
  approved
  rejected
  flagged
}

enum ConfigType {
  string
  integer
  float
  boolean
  json
  text
}

enum GymType {
  crossfit_certified
  comprehensive
  specialty
}
