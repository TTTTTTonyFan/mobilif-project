
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  unionId: 'unionId',
  openId: 'openId',
  phone: 'phone',
  email: 'email',
  username: 'username',
  nickname: 'nickname',
  realName: 'realName',
  avatar: 'avatar',
  gender: 'gender',
  birthday: 'birthday',
  age: 'age',
  height: 'height',
  weight: 'weight',
  fitnessLevel: 'fitnessLevel',
  fitnessGoals: 'fitnessGoals',
  bio: 'bio',
  location: 'location',
  timezone: 'timezone',
  language: 'language',
  status: 'status',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  privacySettings: 'privacySettings',
  notificationSettings: 'notificationSettings',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  loginCount: 'loginCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  authType: 'authType',
  authKey: 'authKey',
  authSecret: 'authSecret',
  salt: 'salt',
  expiresAt: 'expiresAt',
  isVerified: 'isVerified',
  verifyToken: 'verifyToken',
  verifyExpiresAt: 'verifyExpiresAt',
  failedAttempts: 'failedAttempts',
  lockedUntil: 'lockedUntil',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  deviceId: 'deviceId',
  deviceType: 'deviceType',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  lastActivityAt: 'lastActivityAt',
  createdAt: 'createdAt'
};

exports.Prisma.GymScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  shortDescription: 'shortDescription',
  address: 'address',
  district: 'district',
  city: 'city',
  province: 'province',
  country: 'country',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude',
  phone: 'phone',
  email: 'email',
  website: 'website',
  socialMedia: 'socialMedia',
  images: 'images',
  logo: 'logo',
  facilities: 'facilities',
  equipment: 'equipment',
  amenities: 'amenities',
  openingHours: 'openingHours',
  holidayHours: 'holidayHours',
  priceRange: 'priceRange',
  pricingInfo: 'pricingInfo',
  capacity: 'capacity',
  areaSize: 'areaSize',
  parkingInfo: 'parkingInfo',
  transportInfo: 'transportInfo',
  rating: 'rating',
  reviewCount: 'reviewCount',
  viewCount: 'viewCount',
  favoriteCount: 'favoriteCount',
  checkinCount: 'checkinCount',
  status: 'status',
  verified: 'verified',
  featured: 'featured',
  gymType: 'gymType',
  crossfitCertified: 'crossfitCertified',
  supportedPrograms: 'supportedPrograms',
  tags: 'tags',
  businessLicense: 'businessLicense',
  insuranceInfo: 'insuranceInfo',
  safetyCertifications: 'safetyCertifications',
  ownerId: 'ownerId',
  managerIds: 'managerIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TrainerScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  gymId: 'gymId',
  employeeId: 'employeeId',
  name: 'name',
  nameEn: 'nameEn',
  avatar: 'avatar',
  title: 'title',
  level: 'level',
  specialties: 'specialties',
  certifications: 'certifications',
  education: 'education',
  experienceYears: 'experienceYears',
  bio: 'bio',
  languages: 'languages',
  availability: 'availability',
  hourlyRate: 'hourlyRate',
  pricingTiers: 'pricingTiers',
  rating: 'rating',
  reviewCount: 'reviewCount',
  classCount: 'classCount',
  studentCount: 'studentCount',
  achievementCount: 'achievementCount',
  socialMedia: 'socialMedia',
  contactInfo: 'contactInfo',
  emergencyContact: 'emergencyContact',
  status: 'status',
  employmentType: 'employmentType',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ClassCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  icon: 'icon',
  color: 'color',
  parentId: 'parentId',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  gymId: 'gymId',
  trainerId: 'trainerId',
  categoryId: 'categoryId',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  shortDescription: 'shortDescription',
  type: 'type',
  level: 'level',
  duration: 'duration',
  maxParticipants: 'maxParticipants',
  minParticipants: 'minParticipants',
  currentParticipants: 'currentParticipants',
  price: 'price',
  originalPrice: 'originalPrice',
  currency: 'currency',
  discountInfo: 'discountInfo',
  packageInfo: 'packageInfo',
  equipmentNeeded: 'equipmentNeeded',
  equipmentProvided: 'equipmentProvided',
  requirements: 'requirements',
  benefits: 'benefits',
  startTime: 'startTime',
  endTime: 'endTime',
  timezone: 'timezone',
  recurrenceRule: 'recurrenceRule',
  location: 'location',
  room: 'room',
  onlineMeetingUrl: 'onlineMeetingUrl',
  isOnline: 'isOnline',
  isHybrid: 'isHybrid',
  registrationDeadline: 'registrationDeadline',
  cancellationDeadline: 'cancellationDeadline',
  waitingListEnabled: 'waitingListEnabled',
  autoConfirm: 'autoConfirm',
  requiresApproval: 'requiresApproval',
  tags: 'tags',
  images: 'images',
  videoPreview: 'videoPreview',
  materials: 'materials',
  status: 'status',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  bookingNo: 'bookingNo',
  userId: 'userId',
  classId: 'classId',
  participants: 'participants',
  companionInfo: 'companionInfo',
  bookingTime: 'bookingTime',
  confirmedAt: 'confirmedAt',
  checkedInAt: 'checkedInAt',
  checkedOutAt: 'checkedOutAt',
  status: 'status',
  cancellationReason: 'cancellationReason',
  cancellationTime: 'cancellationTime',
  cancellationFee: 'cancellationFee',
  noShowFee: 'noShowFee',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  paymentAmount: 'paymentAmount',
  discountAmount: 'discountAmount',
  finalAmount: 'finalAmount',
  currency: 'currency',
  paymentTime: 'paymentTime',
  paymentId: 'paymentId',
  refundAmount: 'refundAmount',
  refundTime: 'refundTime',
  refundId: 'refundId',
  source: 'source',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  specialRequests: 'specialRequests',
  notes: 'notes',
  rating: 'rating',
  review: 'review',
  reviewedAt: 'reviewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillNodeScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  code: 'code',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  shortDescription: 'shortDescription',
  category: 'category',
  subcategory: 'subcategory',
  level: 'level',
  difficulty: 'difficulty',
  prerequisites: 'prerequisites',
  pointsRequired: 'pointsRequired',
  experienceRequired: 'experienceRequired',
  estimatedTimeHours: 'estimatedTimeHours',
  demonstrationVideo: 'demonstrationVideo',
  tutorialContent: 'tutorialContent',
  verificationCriteria: 'verificationCriteria',
  verificationMethods: 'verificationMethods',
  safetyNotes: 'safetyNotes',
  commonMistakes: 'commonMistakes',
  tips: 'tips',
  relatedSkills: 'relatedSkills',
  progressionPath: 'progressionPath',
  equipmentNeeded: 'equipmentNeeded',
  muscleGroups: 'muscleGroups',
  benefits: 'benefits',
  positionX: 'positionX',
  positionY: 'positionY',
  mapSection: 'mapSection',
  icon: 'icon',
  iconLocked: 'iconLocked',
  iconCompleted: 'iconCompleted',
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor',
  tags: 'tags',
  metadata: 'metadata',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserSkillProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId',
  status: 'status',
  progressPercentage: 'progressPercentage',
  attempts: 'attempts',
  successfulAttempts: 'successfulAttempts',
  bestScore: 'bestScore',
  latestScore: 'latestScore',
  practiceHours: 'practiceHours',
  practiceSessions: 'practiceSessions',
  videoSubmissions: 'videoSubmissions',
  instructorFeedback: 'instructorFeedback',
  peerReviews: 'peerReviews',
  selfAssessment: 'selfAssessment',
  difficultyRating: 'difficultyRating',
  notes: 'notes',
  milestones: 'milestones',
  unlockedAt: 'unlockedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  certifiedAt: 'certifiedAt',
  certifiedBy: 'certifiedBy',
  certificationLevel: 'certificationLevel',
  certificationScore: 'certificationScore',
  certificationNotes: 'certificationNotes',
  certificationVideo: 'certificationVideo',
  certificationExpiresAt: 'certificationExpiresAt',
  lastPracticedAt: 'lastPracticedAt',
  reminderCount: 'reminderCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPointsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalPoints: 'totalPoints',
  availablePoints: 'availablePoints',
  usedPoints: 'usedPoints',
  expiredPoints: 'expiredPoints',
  level: 'level',
  experience: 'experience',
  nextLevelExperience: 'nextLevelExperience',
  rank: 'rank',
  rankUpdatedAt: 'rankUpdatedAt',
  streakDays: 'streakDays',
  maxStreakDays: 'maxStreakDays',
  lastCheckin: 'lastCheckin',
  totalCheckins: 'totalCheckins',
  weeklyPoints: 'weeklyPoints',
  monthlyPoints: 'monthlyPoints',
  yearlyPoints: 'yearlyPoints',
  lifetimePoints: 'lifetimePoints',
  bonusMultiplier: 'bonusMultiplier',
  vipLevel: 'vipLevel',
  seasonPoints: 'seasonPoints',
  seasonRank: 'seasonRank',
  achievementsCount: 'achievementsCount',
  badgesCount: 'badgesCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PointTransactionScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  type: 'type',
  points: 'points',
  source: 'source',
  sourceId: 'sourceId',
  referenceType: 'referenceType',
  referenceId: 'referenceId',
  description: 'description',
  multiplier: 'multiplier',
  bonusPoints: 'bonusPoints',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  expiresAt: 'expiresAt',
  expiredAt: 'expiredAt',
  isExpired: 'isExpired',
  batchId: 'batchId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.FriendshipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  friendId: 'friendId',
  status: 'status',
  initiatorId: 'initiatorId',
  message: 'message',
  source: 'source',
  mutualFriendsCount: 'mutualFriendsCount',
  interactionScore: 'interactionScore',
  lastInteractionAt: 'lastInteractionAt',
  requestedAt: 'requestedAt',
  respondedAt: 'respondedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  userId: 'userId',
  type: 'type',
  content: 'content',
  images: 'images',
  videos: 'videos',
  thumbnail: 'thumbnail',
  location: 'location',
  locationCoordinates: 'locationCoordinates',
  gymId: 'gymId',
  classId: 'classId',
  workoutData: 'workoutData',
  achievementData: 'achievementData',
  hashtags: 'hashtags',
  mentions: 'mentions',
  privacy: 'privacy',
  allowComments: 'allowComments',
  allowShares: 'allowShares',
  likeCount: 'likeCount',
  commentCount: 'commentCount',
  shareCount: 'shareCount',
  viewCount: 'viewCount',
  saveCount: 'saveCount',
  reportCount: 'reportCount',
  engagementScore: 'engagementScore',
  trendingScore: 'trendingScore',
  qualityScore: 'qualityScore',
  isFeatured: 'isFeatured',
  isPinned: 'isPinned',
  isDeleted: 'isDeleted',
  isBlocked: 'isBlocked',
  deletedReason: 'deletedReason',
  moderationStatus: 'moderationStatus',
  moderatedAt: 'moderatedAt',
  moderatedBy: 'moderatedBy',
  scheduledAt: 'scheduledAt',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  configKey: 'configKey',
  configValue: 'configValue',
  configType: 'configType',
  category: 'category',
  description: 'description',
  isPublic: 'isPublic',
  isReadonly: 'isReadonly',
  validationRule: 'validationRule',
  defaultValue: 'defaultValue',
  options: 'options',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  unionId: 'unionId',
  openId: 'openId',
  phone: 'phone',
  email: 'email',
  username: 'username',
  nickname: 'nickname',
  realName: 'realName',
  avatar: 'avatar',
  bio: 'bio',
  location: 'location',
  timezone: 'timezone',
  language: 'language',
  lastLoginIp: 'lastLoginIp'
};

exports.Prisma.UserAuthOrderByRelevanceFieldEnum = {
  authKey: 'authKey',
  authSecret: 'authSecret',
  salt: 'salt',
  verifyToken: 'verifyToken'
};

exports.Prisma.UserSessionOrderByRelevanceFieldEnum = {
  sessionId: 'sessionId',
  deviceId: 'deviceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location'
};

exports.Prisma.GymOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  shortDescription: 'shortDescription',
  address: 'address',
  district: 'district',
  city: 'city',
  province: 'province',
  country: 'country',
  postalCode: 'postalCode',
  phone: 'phone',
  email: 'email',
  website: 'website',
  logo: 'logo',
  priceRange: 'priceRange',
  businessLicense: 'businessLicense'
};

exports.Prisma.TrainerOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  employeeId: 'employeeId',
  name: 'name',
  nameEn: 'nameEn',
  avatar: 'avatar',
  title: 'title',
  bio: 'bio'
};

exports.Prisma.ClassCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  icon: 'icon',
  color: 'color'
};

exports.Prisma.ClassOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  shortDescription: 'shortDescription',
  type: 'type',
  currency: 'currency',
  timezone: 'timezone',
  location: 'location',
  room: 'room',
  onlineMeetingUrl: 'onlineMeetingUrl',
  videoPreview: 'videoPreview'
};

exports.Prisma.BookingOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  bookingNo: 'bookingNo',
  cancellationReason: 'cancellationReason',
  paymentMethod: 'paymentMethod',
  currency: 'currency',
  paymentId: 'paymentId',
  refundId: 'refundId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  specialRequests: 'specialRequests',
  notes: 'notes',
  review: 'review'
};

exports.Prisma.SkillNodeOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  code: 'code',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  shortDescription: 'shortDescription',
  category: 'category',
  subcategory: 'subcategory',
  demonstrationVideo: 'demonstrationVideo',
  safetyNotes: 'safetyNotes',
  mapSection: 'mapSection',
  icon: 'icon',
  iconLocked: 'iconLocked',
  iconCompleted: 'iconCompleted',
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};

exports.Prisma.UserSkillProgressOrderByRelevanceFieldEnum = {
  notes: 'notes',
  certificationNotes: 'certificationNotes',
  certificationVideo: 'certificationVideo'
};

exports.Prisma.PointTransactionOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  source: 'source',
  sourceId: 'sourceId',
  referenceType: 'referenceType',
  description: 'description',
  batchId: 'batchId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.FriendshipOrderByRelevanceFieldEnum = {
  message: 'message'
};

exports.Prisma.PostOrderByRelevanceFieldEnum = {
  uuid: 'uuid',
  content: 'content',
  thumbnail: 'thumbnail',
  location: 'location',
  deletedReason: 'deletedReason'
};

exports.Prisma.SystemConfigOrderByRelevanceFieldEnum = {
  configKey: 'configKey',
  configValue: 'configValue',
  category: 'category',
  description: 'description',
  validationRule: 'validationRule',
  defaultValue: 'defaultValue'
};
exports.FitnessLevel = exports.$Enums.FitnessLevel = {
  beginner: 'beginner',
  intermediate: 'intermediate',
  advanced: 'advanced',
  expert: 'expert'
};

exports.AuthType = exports.$Enums.AuthType = {
  wechat: 'wechat',
  phone: 'phone',
  email: 'email',
  username: 'username',
  apple: 'apple',
  google: 'google'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  ios: 'ios',
  android: 'android',
  web: 'web',
  wechat: 'wechat'
};

exports.GymType = exports.$Enums.GymType = {
  crossfit_certified: 'crossfit_certified',
  comprehensive: 'comprehensive',
  specialty: 'specialty'
};

exports.TrainerLevel = exports.$Enums.TrainerLevel = {
  junior: 'junior',
  intermediate: 'intermediate',
  senior: 'senior',
  master: 'master'
};

exports.EmploymentType = exports.$Enums.EmploymentType = {
  full_time: 'full_time',
  part_time: 'part_time',
  freelance: 'freelance',
  intern: 'intern'
};

exports.ClassLevel = exports.$Enums.ClassLevel = {
  beginner: 'beginner',
  intermediate: 'intermediate',
  advanced: 'advanced',
  all_levels: 'all_levels'
};

exports.ClassVisibility = exports.$Enums.ClassVisibility = {
  public: 'public',
  private: 'private',
  members_only: 'members_only'
};

exports.BookingSource = exports.$Enums.BookingSource = {
  app: 'app',
  web: 'web',
  wechat: 'wechat',
  api: 'api'
};

exports.SkillDifficulty = exports.$Enums.SkillDifficulty = {
  easy: 'easy',
  medium: 'medium',
  hard: 'hard',
  expert: 'expert'
};

exports.CertificationLevel = exports.$Enums.CertificationLevel = {
  bronze: 'bronze',
  silver: 'silver',
  gold: 'gold',
  platinum: 'platinum'
};

exports.PointTransactionType = exports.$Enums.PointTransactionType = {
  earn: 'earn',
  spend: 'spend',
  expired: 'expired',
  bonus: 'bonus',
  refund: 'refund',
  penalty: 'penalty'
};

exports.FriendshipSource = exports.$Enums.FriendshipSource = {
  search: 'search',
  recommendation: 'recommendation',
  qr_code: 'qr_code',
  phone: 'phone',
  gym: 'gym',
  class: 'class'
};

exports.PostType = exports.$Enums.PostType = {
  text: 'text',
  image: 'image',
  video: 'video',
  workout: 'workout',
  achievement: 'achievement',
  checkin: 'checkin',
  share: 'share'
};

exports.ModerationStatus = exports.$Enums.ModerationStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  flagged: 'flagged'
};

exports.ConfigType = exports.$Enums.ConfigType = {
  string: 'string',
  integer: 'integer',
  float: 'float',
  boolean: 'boolean',
  json: 'json',
  text: 'text'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserAuth: 'UserAuth',
  UserSession: 'UserSession',
  Gym: 'Gym',
  Trainer: 'Trainer',
  ClassCategory: 'ClassCategory',
  Class: 'Class',
  Booking: 'Booking',
  SkillNode: 'SkillNode',
  UserSkillProgress: 'UserSkillProgress',
  UserPoints: 'UserPoints',
  PointTransaction: 'PointTransaction',
  Friendship: 'Friendship',
  Post: 'Post',
  SystemConfig: 'SystemConfig'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
